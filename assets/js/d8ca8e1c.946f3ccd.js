"use strict";(self.webpackChunkjakenelson_cloud=self.webpackChunkjakenelson_cloud||[]).push([[9909],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),d=a,m=p["".concat(l,".").concat(d)]||p[d]||h[d]||o;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8367:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],s={id:"bash-convert-string-to-array",title:"Convert a String to an Array in Bash",tags:["bash","linux","array","loops"]},l="Convert a String to an Array in Bash",c={unversionedId:"tech/bash/bash-convert-string-to-array",id:"tech/bash/bash-convert-string-to-array",title:"Convert a String to an Array in Bash",description:"and iterate over it",source:"@site/docs/tech/bash/bash-convert-string-to-array.mdx",sourceDirName:"tech/bash",slug:"/tech/bash/bash-convert-string-to-array",permalink:"/docs/tech/bash/bash-convert-string-to-array",editUrl:"https://github.com/Jake-Mok-Nelson/website/tree/main/jakenelson.cloud/docs/tech/bash/bash-convert-string-to-array.mdx",tags:[{label:"bash",permalink:"/docs/tags/bash"},{label:"linux",permalink:"/docs/tags/linux"},{label:"array",permalink:"/docs/tags/array"},{label:"loops",permalink:"/docs/tags/loops"}],version:"current",frontMatter:{id:"bash-convert-string-to-array",title:"Convert a String to an Array in Bash",tags:["bash","linux","array","loops"]},sidebar:"tutorialSidebar",previous:{title:"Team Learning Hours",permalink:"/docs/leadership/team-learning-hour"},next:{title:"Git Aliases",permalink:"/docs/tech/bash/aliases/my-git-aliases"}},u=[{value:"and iterate over it",id:"and-iterate-over-it",children:[],level:3},{value:"Example Scenario",id:"example-scenario",children:[{value:"Example data structure",id:"example-data-structure",children:[],level:3},{value:"Ensure consistency",id:"ensure-consistency",children:[],level:3},{value:"Convert the now clean string to an array of values",id:"convert-the-now-clean-string-to-an-array-of-values",children:[{value:"What&#39;s happening here?",id:"whats-happening-here",children:[],level:4}],level:3},{value:"Loop the array (to do something)",id:"loop-the-array-to-do-something",children:[],level:3}],level:2}],h={toc:u};function p(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"convert-a-string-to-an-array-in-bash"},"Convert a String to an Array in Bash"),(0,o.kt)("h3",{id:"and-iterate-over-it"},"and iterate over it"),(0,o.kt)("h2",{id:"example-scenario"},"Example Scenario"),(0,o.kt)("p",null,"In a situation where we receive a string that contains an array with a consistent delimeter we might want to iterate over\nthat in order to perform some action."),(0,o.kt)("p",null,"Example array as a string input.\nWe're assuming it's in this state because it was easy for the CI/CD tooling to pass in the array in this structure."),(0,o.kt)("h3",{id:"example-data-structure"},"Example data structure"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'TARGETS="email1@email.com, email2@email.com, email3@email.com"\n')),(0,o.kt)("p",null,"In this case we want to iterate over each of those email addresses and send the person a message."),(0,o.kt)("h3",{id:"ensure-consistency"},"Ensure consistency"),(0,o.kt)("p",null,"Firstly, we want the string in a consistent state, we don't know if the input will include spaces or not so best we remove them."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"TARGETS=$(echo \"${TARGETS}\" | tr -d ' ') # remove white space from targets array (currently a string)\n")),(0,o.kt)("p",null,"We could also use a regex check to ensure that the email is a valid email but that's a bit overkill in this situation."),(0,o.kt)("h3",{id:"convert-the-now-clean-string-to-an-array-of-values"},"Convert the now clean string to an array of values"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"IFS=',' read -r -a LIST_OF_TARGETS <<< \"${TARGETS}\" # convert the string into an array (comma delimeter)\n")),(0,o.kt)("h4",{id:"whats-happening-here"},"What's happening here?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We're setting the value separator (delimeter) with the ",(0,o.kt)("inlineCode",{parentName:"li"},"IFS=','")," portion."),(0,o.kt)("li",{parentName:"ul"},"We're creating an array called LIST_OF_TARGETS"),(0,o.kt)("li",{parentName:"ul"},"We're reading through the TARGETS string splitting the values into elements of the array.")),(0,o.kt)("h3",{id:"loop-the-array-to-do-something"},"Loop the array (to do something)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'for CURRENT_TARGET in "${LIST_OF_TARGETS[@]}"\ndo  \n    if sendMessage "Hello" "${CURRENT_TARGET}; then\n        echo "Sent successfully"\n    else\n        echo "Message failed to send"\n    fi\ndone\n')))}p.isMDXComponent=!0}}]);